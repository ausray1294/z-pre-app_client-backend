volumes:
  postgres_data:

services:
  postgresdb:
    image: postgres:alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_DB=inventory_db
      - POSTGRES_PORT=5432
    ports:
      - '5432:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - inventory_network

  server:
    build: ./backend
    depends_on:
      postgresdb:
        condition: service_healthy
    ports:
      - '8080:8080'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=docker
      - POSTGRES_DB=inventory_db
      - POSTGRES_PORT=5432
      - DATABASE_HOST=postgresdb
      - NODE_ENV=development
    volumes:
      - type: bind
        source: ./backend
        target: /app/src
    command: npm run start:dev
    networks:
      - inventory_network

  client:
    build: ./client
    depends_on:
      - server
    ports:
      - '3000:3000'
    volumes:
      - type: bind
        source: ./client
        target: /app
    networks:
      - inventory_network

networks:
  inventory_network:
    driver: bridge
